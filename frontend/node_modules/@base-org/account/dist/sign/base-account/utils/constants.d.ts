/**********************************************************************
 * Constants
 **********************************************************************/
export declare const factoryAddress = "0xba5ed110efdba3d005bfc882d75358acbbb85842";
export declare const spendPermissionManagerAddress = "0xf85210B21cC50302F477BA56686d2019dC9b67Ad";
export declare const abi: readonly [{
    readonly inputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
}, {
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly type: "bytes";
    }];
    readonly name: "AlreadyOwner";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "Initialized";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly type: "bytes";
    }];
    readonly name: "InvalidEthereumAddressOwner";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly name: "key";
        readonly type: "uint256";
    }];
    readonly name: "InvalidNonceKey";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly type: "bytes";
    }];
    readonly name: "InvalidOwnerBytesLength";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LastOwner";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly name: "index";
        readonly type: "uint256";
    }];
    readonly name: "NoOwnerAtIndex";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly name: "ownersRemaining";
        readonly type: "uint256";
    }];
    readonly name: "NotLastOwner";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly name: "selector";
        readonly type: "bytes4";
    }];
    readonly name: "SelectorNotAllowed";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "Unauthorized";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "UnauthorizedCallContext";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "UpgradeFailed";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly name: "index";
        readonly type: "uint256";
    }, {
        readonly name: "expectedOwner";
        readonly type: "bytes";
    }, {
        readonly name: "actualOwner";
        readonly type: "bytes";
    }];
    readonly name: "WrongOwnerAtIndex";
    readonly type: "error";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly name: "index";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly name: "owner";
        readonly type: "bytes";
    }];
    readonly name: "AddOwner";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly name: "index";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly name: "owner";
        readonly type: "bytes";
    }];
    readonly name: "RemoveOwner";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly name: "implementation";
        readonly type: "address";
    }];
    readonly name: "Upgraded";
    readonly type: "event";
}, {
    readonly stateMutability: "payable";
    readonly type: "fallback";
}, {
    readonly inputs: readonly [];
    readonly name: "REPLAYABLE_NONCE_KEY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly type: "address";
    }];
    readonly name: "addOwnerAddress";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly name: "x";
        readonly type: "bytes32";
    }, {
        readonly name: "y";
        readonly type: "bytes32";
    }];
    readonly name: "addOwnerPublicKey";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly name: "functionSelector";
        readonly type: "bytes4";
    }];
    readonly name: "canSkipChainIdValidation";
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "pure";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "domainSeparator";
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "eip712Domain";
    readonly outputs: readonly [{
        readonly name: "fields";
        readonly type: "bytes1";
    }, {
        readonly name: "name";
        readonly type: "string";
    }, {
        readonly name: "version";
        readonly type: "string";
    }, {
        readonly name: "chainId";
        readonly type: "uint256";
    }, {
        readonly name: "verifyingContract";
        readonly type: "address";
    }, {
        readonly name: "salt";
        readonly type: "bytes32";
    }, {
        readonly name: "extensions";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "entryPoint";
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly name: "target";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly type: "bytes";
    }];
    readonly name: "execute";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly name: "target";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "calls";
        readonly type: "tuple[]";
    }];
    readonly name: "executeBatch";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly name: "calls";
        readonly type: "bytes[]";
    }];
    readonly name: "executeWithoutChainIdValidation";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly name: "nonce";
            readonly type: "uint256";
        }, {
            readonly name: "initCode";
            readonly type: "bytes";
        }, {
            readonly name: "callData";
            readonly type: "bytes";
        }, {
            readonly name: "callGasLimit";
            readonly type: "uint256";
        }, {
            readonly name: "verificationGasLimit";
            readonly type: "uint256";
        }, {
            readonly name: "preVerificationGas";
            readonly type: "uint256";
        }, {
            readonly name: "maxFeePerGas";
            readonly type: "uint256";
        }, {
            readonly name: "maxPriorityFeePerGas";
            readonly type: "uint256";
        }, {
            readonly name: "paymasterAndData";
            readonly type: "bytes";
        }, {
            readonly name: "signature";
            readonly type: "bytes";
        }];
        readonly name: "userOp";
        readonly type: "tuple";
 